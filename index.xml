<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Academic Site</title>
    <link>https://nkrvavica.github.io/</link>
      <atom:link href="https://nkrvavica.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>My Academic Site</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://nkrvavica.github.io/media/nino_2020.jpg</url>
      <title>My Academic Site</title>
      <link>https://nkrvavica.github.io/</link>
    </image>
    
    <item>
      <title>Python basics</title>
      <link>https://nkrvavica.github.io/courses/example/python/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/courses/example/python/</guid>
      <description>&lt;p&gt;Build a foundation in Python.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/rfscVS0vtbw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;What is the difference between lists and tuples?&lt;/summary&gt;
  &lt;p&gt;&lt;p&gt;Lists&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists are mutable - they can be changed&lt;/li&gt;
&lt;li&gt;Slower than tuples&lt;/li&gt;
&lt;li&gt;Syntax: &lt;code&gt;a_list = [1, 2.0, &#39;Hello world&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tuples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are immutable - they can&amp;rsquo;t be changed&lt;/li&gt;
&lt;li&gt;Tuples are faster than lists&lt;/li&gt;
&lt;li&gt;Syntax: &lt;code&gt;a_tuple = (1, 2.0, &#39;Hello world&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-3&#34;&gt;
  &lt;summary&gt;Is Python case-sensitive?&lt;/summary&gt;
  &lt;p&gt;Yes&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Visualization</title>
      <link>https://nkrvavica.github.io/courses/example/visualization/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/courses/example/visualization/</guid>
      <description>&lt;p&gt;Learn how to visualize data with Plotly.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/hSPmj7mK6ng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;When is a heatmap useful?&lt;/summary&gt;
  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;
&lt;/details&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-3&#34;&gt;
  &lt;summary&gt;Write Plotly code to render a bar chart&lt;/summary&gt;
  &lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
data_canada = px.data.gapminder().query(&amp;quot;country == &#39;Canada&#39;&amp;quot;)
fig = px.bar(data_canada, x=&#39;year&#39;, y=&#39;pop&#39;)
fig.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Statistics</title>
      <link>https://nkrvavica.github.io/courses/example/stats/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/courses/example/stats/</guid>
      <description>&lt;p&gt;Introduction to statistics for data science.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;
&lt;p&gt;The general form of the &lt;strong&gt;normal&lt;/strong&gt; probability density function is:&lt;/p&gt;
&lt;p&gt;$$
f(x) = \frac{1}{\sigma \sqrt{2\pi} } e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}
$$&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The parameter $\mu$ is the mean or expectation of the distribution.
$\sigma$ is its standard deviation.
The variance of the distribution is $\sigma^{2}$.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;What is the parameter $\mu$?&lt;/summary&gt;
  &lt;p&gt;The parameter $\mu$ is the mean or expectation of the distribution.&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Estimating River Discharges in Highly Stratified Estuaries</title>
      <link>https://nkrvavica.github.io/project/uniri_zip_2020-2022/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/project/uniri_zip_2020-2022/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Project nr.: ZIP-UNIRI-1500-1-20.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Project duration: December, 2020 - December, 2022&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Lead researcher: Nino Krvavica, PhD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Estuaries are transitional areas between river and marine environments. Understanding the estuarine dynamics is important for various water management issues, such as predicting floods and droughts, assessing impacts of sea level rise, planning freshwater intake for irrigation, and managing sediment transport. One of the key requirements for understanding and predicting the estuarine dynamics is to have reliable river discharge data. Current approaches for estimating discharges in tidally affected river reaches have limitations and new concepts and computational methods are needed. Therefore, the main objective of this research is to develop a suitable computational method for estimating river discharges in highly stratified estuaries from field measurements. The pilot area will be the Neretva River estuary, the largest river in the eastern part of the Adriatic Basin. The methodology consists of data processing, signal analysis, numerical modelling, and development of a hybrid computational approach, which combines physically based models with machine learning methods. The project team will be established at the University of Rijeka, Faculty of Civil Engineering, and it will consist of experts in hydrology, coastal engineering, signal processing and machine learning. The team will be led by Nino Krvavica, an expert in estuarine hydrodynamics. The expected result and main scientific contribution from this research will be a methodology for estimating river discharges in highly stratified estuaries from known water stages and sea levels. Once the method is thoroughly tested and validated in the Neretva River, it could be applied to other coastal rivers in Croatia and implemented as a part of a national hydrological monitoring programme.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluation of Design Storms and Critical Rainfall Durations for Flood Prediction in Partially Urbanized Catchments</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2020-novigrad/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0200</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2020-novigrad/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Interview for an online magazine Stilueta</title>
      <link>https://nkrvavica.github.io/talk/interview-for-an-online-magazine-stilueta/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/talk/interview-for-an-online-magazine-stilueta/</guid>
      <description>&lt;h2 id=&#34;iterview-for-stilueta&#34;&gt;Iterview for Stilueta&lt;/h2&gt;
&lt;p&gt;In March 2020 I gave an &lt;a href=&#34;https://stilueta.net/grad-znanja-kava-kolac-more-i-rijeka-nina-krvavice/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;interview&lt;/a&gt; for an online magazine Stilueta, where I talked about my scientific work, life as a scientist, my background, and free time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time-dependent numerical model for simulating internal oscillations in a sea organ</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2020-seaorgan/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0200</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2020-seaorgan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Assessment of sea-level rise impacts on salt-wedge intrusion in idealized and Neretva River Estuary</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2020-sealevelrise/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2020-sealevelrise/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scientific talk for the Radio Rijeka</title>
      <link>https://nkrvavica.github.io/talk/scientific-talk-for-the-radio-rijeka/</link>
      <pubDate>Sun, 12 Jan 2020 19:30:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/talk/scientific-talk-for-the-radio-rijeka/</guid>
      <description>&lt;h2 id=&#34;iterview-for-radio-rijeka&#34;&gt;Iterview for radio Rijeka&lt;/h2&gt;
&lt;p&gt;In the January of 2020 I gave an &lt;a href=&#34;https://radio.hrt.hr/radio-rijeka/ep/nino-krvavica-rjecina-kao-model/328526/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;interview&lt;/a&gt; for a local radio station Rijeka, and I talked about my scientific work, current research and future plans.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re-evaluating efficiency of first-order numerical schemes for two-layer shallow water systems by considering different eigenvalue solutions</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2020-reevaluating/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2020-reevaluating/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Award for the best scientist at the University of Rijeka in 2018 in technical and biotechnical sciences</title>
      <link>https://nkrvavica.github.io/talk/award-for-the-best-scientist-at-the-university-of-rijeka-in-2018-in-technical-and-biotechnical-sciences/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/talk/award-for-the-best-scientist-at-the-university-of-rijeka-in-2018-in-technical-and-biotechnical-sciences/</guid>
      <description>&lt;p&gt;In December 2019, I received an award from Scientific Foundation for the best scientist at the University of Rijeka for 2018 in technical and biotechnical sciences.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sustainable Construction of Artificial Gravel Beaches-Construction of New Beaches and an Increase Of Existing Capacity</title>
      <link>https://nkrvavica.github.io/project/beachex_2019-23/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/project/beachex_2019-23/</guid>
      <description>&lt;p&gt;&lt;strong&gt;BEACHEX&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;SUSTAINABLE CONSTRUCTION OF ARTIFICIAL GRAVEL BEACHES-CONSTRUCTION OF NEW BEACHES AND AN INCREASE OF EXISTING CAPACITY&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Project duration: 2019 - 2023&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Lead researcher: Dalibor Carević, PhD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Project [homepage] (&lt;a href=&#34;http://grad.hr/beachex/en/&#34;&gt;http://grad.hr/beachex/en/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About Beachex&lt;/strong&gt;
Croatia’s gravel beaches are under immense pressure from the rapidly growing tourist industry that requires an increase in existing beach capacity by beach nourishment while at the same time the beaches are under the influence of increased storm activity as a consequence of climate change. The Beachex project aims to explore the mechanisms of gravel beach erosion and recovery to provide technical support for long-term beach nourishment in order to achieve a sustainable increase in beach capacity while reducing the influence of climate change.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assessment of the Coastal Vulnerability Index in an Area of Complex Geological Conditions on the Krk Island, Northeast Adriatic Sea</title>
      <link>https://nkrvavica.github.io/publication/ruvzic-2019-geosciences/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/ruvzic-2019-geosciences/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://nkrvavica.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On computing roots of quartic and cubic equations in Python</title>
      <link>https://nkrvavica.github.io/post/on_computing_roots/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/post/on_computing_roots/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This document examines various ways to compute roots of cubic (3rd order polynomial) and quartic (4th order polynomial) equations in Python. First, two numerical algorithms, available from Numpy package (&lt;code&gt;roots&lt;/code&gt; and &lt;code&gt;linalg.eigvals&lt;/code&gt;), were analyzed. Then, an optimized closed-form analytical solutions to cubic and quartic equations were implemented and examined. Finally, the analytical solutions were vectorized by using &lt;code&gt;numpy&lt;/code&gt; arrays in order to avoid slow python iterations when multiple polynomials are solved. All these functions were evaluated by comparing their computational speeds. Analytical cubic and quartic solvers were one order of magnitude faster than both numerical Numpy functions for a single polynomial. When a large set of polynomials were given as input, the vectorized analytical solver outperformed the numerical Numpy functions by one and two orders of magnitude, respectively.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In scientific computing we are sometimes faced with solving roots of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Cubic_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cubic&lt;/a&gt; (3rd order polynomial) or &lt;a href=&#34;https://en.wikipedia.org/wiki/Quartic_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quartic&lt;/a&gt; equation (4th order polynomial) to get crucial information about the characteristics of some physical process or to develop an appropriate numerical scheme. These issues are regularly encountered when analyzing coupled dynamic systems described by three or four differential equations. One such example is a two-layer &lt;a href=&#34;https://en.wikipedia.org/wiki/Shallow_water_equations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shallow Water Flow&lt;/a&gt; (SWE), which is defined by four &lt;a href=&#34;https://en.wikipedia.org/wiki/Partial_differential_equation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Partial Differential Equations&lt;/a&gt; (PDE). In two-layer SWE, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eigenvalues&lt;/a&gt; of the 4x4 flux matrix describe the speed of internal and external wave propagation. And, the eigenvalues correspond to roots of a characteristic 4th order polynomial. Similarly, SWE coupled with sediment transport are defined by three PDEs. In this case,  the eigenvalues of a 3x3 matrix correspond to roots of a characteristic 3rd order polynomial. There are many more examples where such computation is required.&lt;/p&gt;
&lt;p&gt;Roots of cubic and quartic equations can be computed using &lt;a href=&#34;https://en.wikipedia.org/wiki/Numerical_method&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;numerical methods&lt;/a&gt; or analytical expressions (so called &lt;a href=&#34;https://en.wikipedia.org/wiki/Closed-form_expression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;closed-form solutions&lt;/a&gt;). Numerical methods are based on specific algorithms and provide only approximations to roots. &lt;a href=&#34;https://en.wikipedia.org/wiki/Root-finding_algorithm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Root-finding algorithms&lt;/a&gt; (such as Newton&amp;rsquo;s, secant, Brent&amp;rsquo;s method, etc.) are appropriate for any continuous function, they use iterations but do not guarantee that all roots will be found. However, a different class of numerical methods is available (and recommended) for polynomials, based on finding &lt;a href=&#34;https://en.wikipedia.org/wiki/Eigenvalue_algorithm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eigenvalues&lt;/a&gt; of the companion matrix of a polynomial.&lt;/p&gt;
&lt;p&gt;In Python, there are several ways to numerically compute roots of any polynomial; however, only two functions are generally recommended and used. First is a &lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Numpy&lt;/a&gt; function called &lt;code&gt;roots&lt;/code&gt; which directly computes all roots of a general polynomial, and the second is also a &lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Numpy&lt;/a&gt; function from &lt;code&gt;linalg&lt;/code&gt; module called &lt;code&gt;eigvals&lt;/code&gt;, which computes eigenvalues of a companion matrix constructed from a given (characteristic) polynomial.&lt;/p&gt;
&lt;p&gt;On the other hand, analytical &lt;a href=&#34;https://en.wikipedia.org/wiki/Abel%E2%80%93Ruffini_theorem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;closed-form solutions exist for all polynomials of degree lower than five&lt;/a&gt;, that is, for quadratic, cubic, and quartic equations. Although, the expressions for cubic and quadratic roots are longer and more complicated than for a quadratic equations, they can still be easily implemented in some computational algorithm. The closed-form solution for roots of cubic equations is based on Cardano&amp;rsquo;s expressions given &lt;a href=&#34;https://en.wikipedia.org/wiki/Cubic_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.1728.org/cubic2.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Similarly, solution to the roots for quartic equations is based on Ferrari&amp;rsquo;s expressions given &lt;a href=&#34;https://en.wikipedia.org/wiki/Quartic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.1728.org/quartic2.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here.&lt;/a&gt; A fast and optimized algorithm - &lt;a href=&#34;https://github.com/NKrvavica/fqs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FQS&lt;/a&gt; - that uses analytical solutions to cubic and quartic equation was implemented in Python and made publicly available &lt;a href=&#34;https://github.com/NKrvavica/fqs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All computational algorithms were implemented in Python 3.7 with Numpy 1.15, and tests were done on Windows 64-bit machine, i5-2500 CPU @ 3.30 GHz.&lt;/p&gt;
&lt;h2 id=&#34;numerical-algorithms&#34;&gt;Numerical algorithms&lt;/h2&gt;
&lt;h3 id=&#34;function-numpyroots&#34;&gt;Function &lt;code&gt;numpy.roots&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Function &lt;code&gt;numpy.roots&lt;/code&gt; can compute roots of a general polynomial defined by a list of its coefficients &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For cubic equations, &lt;code&gt;p&lt;/code&gt; is defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p[0]*x**3 + p[1]*x**2 + p[2]*x + p[3],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and for quartic equations, &lt;code&gt;p&lt;/code&gt; is defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p[0]*x**4 + p[1]*x**3 + p[2]*x**2 + p[3]*x + p[4].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function to compute roots of a single polynomial is implemented for cubic roots as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy

p_cubic = numpy.random.rand(4)
cubic_roots = numpy.roots(p_cubic)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and for quartic roots:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p_quartic = numpy.random.rand(5)
quartic_roots = numpy.roots(p_quartic)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The respective results are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; p_cubic
array([0.21129527, 0.23589228, 0.73094489, 0.84747689])
&amp;gt;&amp;gt;&amp;gt; cubic_roots
array([ 0.01557778+1.86945535j,  0.01557778-1.86945535j,
        -1.1475662 +0.j        ]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; p_quartic
array([0.30022249, 0.31473263, 0.00791689, 0.06335546, 0.73838408])
&amp;gt;&amp;gt;&amp;gt; quartic_roots
array([-1.19538943+0.7660177j , -1.19538943-0.7660177j ,
        0.67122379+0.87725993j,  0.67122379-0.87725993j])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look at the computation times using &lt;code&gt;timeit&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import timeit

%timeit numpy.roots(p_cubic)
76.5 µs ± 148 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

%timeit numpy.roots(p_quartic)
80.1 µs ± 2.98 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may seem quite fast; however, what if we need to solve, let&amp;rsquo;s say, 10 000 polynomials:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p_cubics = numpy.random.rand(10_000, 4)
p_quartics = numpy.random.rand(10_000, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that &lt;code&gt;numpy.roots&lt;/code&gt; takes only rank-1 arrays, which means that we have to use &lt;code&gt;for&lt;/code&gt; loops or &lt;a href=&#34;https://en.wikipedia.org/wiki/List_comprehension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;list comprehensions&lt;/a&gt;. The latter, are usually faster in python (and more &lt;em&gt;pythonish&lt;/em&gt;), therefore we write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cubic_roots = [numpy.roots(pi) for pi in p_cubics]
quartic_roots = [numpy.roots(pi) for pi in p_quartics]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Their corresponding computation times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit [numpy.roots(pi) for pi in p_cubics]
786 ms ± 15.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

%timeit [numpy.roots(pi) for pi in p_quartics]
795 ms ± 2.51 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that it takes 10 000 times longer to compute 10 000 polynomials than 1 polynomial.&lt;/p&gt;
&lt;p&gt;Can we speed things up, knowing that loops in Python are slower in comparison to other high level languages, such as C/C++ or FORTRAN?&lt;/p&gt;
&lt;h3 id=&#34;function-numpylinalgeigvals&#34;&gt;Function &lt;code&gt;numpy.linalg.eigvals&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Documentation for &lt;code&gt;numpy.roots&lt;/code&gt; states that its algorithms rely on computing the eigenvalues of the &lt;em&gt;companion&lt;/em&gt; matrix. It uses the fact that the eigenvalues of a matrix &lt;code&gt;A&lt;/code&gt; are the roots of its characteristic polynomial &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Function &lt;code&gt;numpy.linalg.eigvals&lt;/code&gt; computes eigenvalues of a general square matrix &lt;code&gt;A&lt;/code&gt; using &lt;em&gt;geev&lt;/em&gt; &lt;a href=&#34;http://www.netlib.org/lapack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LAPACK&lt;/a&gt; routines. The main advantage of the function &lt;code&gt;linalg.eigvals&lt;/code&gt; over &lt;code&gt;roots&lt;/code&gt; is that it uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Array_programming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vectorization&lt;/a&gt;. Meaning, it runs certain operations over entire array, rather than over individual elements. Therefore, it can take as input stacked array of companion matrices, and does not require &lt;code&gt;for&lt;/code&gt; loops or list comprehensions.&lt;/p&gt;
&lt;p&gt;For cubic equations, first we reduce the polynomial to the form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x**3 + a*x**2 +b*x + c = 0,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then construct the companion matrix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A = [[0, 0, -c],
     [1, 0, -b],
     [0, 1, -a]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For quartic equations, we reduce the polynomial to the form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x**4 + a*x**3 + b*x**2 +c*x + d = 0,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then construct the companion matrix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A = [[0, 0, 0, -d],
     [1, 0, 0, -c],
     [0, 1, 0, -b],
     [0, 0, 1, -a]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function to compute roots from eigenvalues of a single companion matrix is implemented for cubic equation as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def eig_cubic_roots(p):
	
    # Coefficients of quartic equation
    a, b, c = p[:, 1]/p[:, 0], p[:, 2]/p[:, 0], p[:, 3]/p[:, 0]
	
    # Construct the companion matrix
    A = numpy.zeros((len(a), 3, 3))
    A[:, 1:, :2] = numpy.eye(2)
    A[:, :, 2] = -numpy.array([c, b, a]).T
	
    # Compute roots using eigenvalues
    return numpy.linalg.eigvals(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, for quartic equation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def eig_quartic_roots(p):
	
    # Coefficients of quartic equation
    a, b, c, d = (p[:, 1]/p[:, 0], p[:, 2]/p[:, 0],
                  p[:, 3]/p[:, 0], p[:, 4]/p[:, 0])
	
    # Construct the companion matrix
    A = numpy.zeros((len(a), 4, 4))
    A[:, 1:, :3] = numpy.eye(3)
    A[:, :, 3] = -numpy.array([d, c, b, a]).T
	
    # Compute roots using eigenvalues
    return numpy.linalg.eigvals(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To compute roots of a single cubic equation, &lt;code&gt;eigvals&lt;/code&gt; is implemented as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cubic_roots = eig_cubic_roots(p_cubic[None, :])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and for quartic roots:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;quartic_roots = eig_quartic_roots(p_quartic[None, :])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; cubic_roots
array([[-1.1475662 +0.j        ,  0.01557778+1.86945535j,
        0.01557778-1.86945535j]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-&amp;gt;&amp;gt;&amp;gt;&#34;&gt;&amp;gt;&amp;gt;&amp;gt; quartic_roots
array([[ 0.67122379+0.87725993j,  0.67122379-0.87725993j,
		-1.19538943+0.7660177j , -1.19538943-0.7660177j ]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look at the computation times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit eig_cubic_roots(p_cubic[None, :])
67 µs ± 316 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

%timeit eig_quartic_roots(p_quartic[None, :])
69.3 µs ± 135 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The computation times are slightly faster than &lt;code&gt;numpy.roots&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let see the difference for 10 000 polynomials:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit eig_cubic_roots(p_cubics)
31.2 ms ± 1.05 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

%timeit eig_quartic_roots(p_quartics)
48.3 ms ± 48.6 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results indicate that &lt;code&gt;numpy.linalg.eigvals&lt;/code&gt; is &lt;strong&gt;one order of magnitude&lt;/strong&gt; faster than &lt;code&gt;numpy.roots&lt;/code&gt;, and that is a huge gain.&lt;/p&gt;
&lt;h2 id=&#34;what-about-analytical-solutions-to-cubic-and-quartic-equations&#34;&gt;What about analytical solutions to cubic and quartic equations?&lt;/h2&gt;
&lt;h3 id=&#34;implementation-for-a-single-polynomial&#34;&gt;Implementation for a single polynomial&lt;/h3&gt;
&lt;p&gt;Now, let&amp;rsquo;s look at analytical implementations available by &lt;a href=&#34;https://github.com/NKrvavica/fqs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FQS&lt;/a&gt; function. First, implementation of analytical solutions for single quadratic, cubic and quartic equation is presented. As stated in the introduction, these algorithms are based on closed-form solutions for cubic (given &lt;a href=&#34;https://en.wikipedia.org/wiki/Cubic_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.1728.org/cubic2.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;) and quartic equations (given &lt;a href=&#34;https://en.wikipedia.org/wiki/Quartic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.1728.org/quartic2.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). These equations were modified to avoid repeating computations.&lt;/p&gt;
&lt;p&gt;Python function for roots of a quadratic equation is implemented as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import math, cmath

def single_quadratic(a0, b0, c0):
    &#39;&#39;&#39; Reduce the quadratic equation to to form:
        x**2 + a*x + b = 0 &#39;&#39;&#39;
    a, b = b0 / a0, c0 / a0

    # Some repeating variables
    a0 = -0.5*a
    delta = a0*a0 - b
    sqrt_delta = cmath.sqrt(delta)

    # Roots
    r1 = a0 - sqrt_delta
    r2 = a0 + sqrt_delta

    return r1, r2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function for roots of a cubic equation is implemented as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def single_cubic(a0, b0, c0, d0):
    &#39;&#39;&#39; Reduce the cubic equation to to form:
        x**3 + a*x**2 + b*x + c = 0 &#39;&#39;&#39;
    a, b, c = b0 / a0, c0 / a0, d0 / a0

    # Some repeating constants and variables
    third = 1./3.
    a13 = a*third
    a2 = a13*a13
    sqr3 = math.sqrt(3)

    # Additional intermediate variables
    f = third*b - a2
    g = a13 * (2*a2 - b) + c
    h = 0.25*g*g + f*f*f

    def cubic_root(x):
        &#39;&#39;&#39; Compute cubic root of a number while maintaining its sign&#39;&#39;&#39;
        if x.real &amp;gt;= 0:
            return x**third
        else:
            return -(-x)**third

    if f == g == h == 0:
        r1 = -cubic_root(c)
        return r1, r1, r1

    elif h &amp;lt;= 0:
        j = math.sqrt(-f)
        k = math.acos(-0.5*g / (j*j*j))
        m = math.cos(third*k)
        n = sqr3 * math.sin(third*k)
        r1 = 2*j*m - a13
        r2 = -j * (m + n) - a13
        r3 = -j * (m - n) - a13
        return r1, r2, r3

    else:
        sqrt_h = cmath.sqrt(h)
        S = cubic_root(-0.5*g + sqrt_h)
        U = cubic_root(-0.5*g - sqrt_h)
        S_plus_U = S + U
        S_minus_U = S - U
        r1 = S_plus_U - a13
        r2 = -0.5*S_plus_U - a13 + S_minus_U*sqr3*0.5j
        r3 = -0.5*S_plus_U - a13 - S_minus_U*sqr3*0.5j
        return r1, r2, r3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, the function for roots of a quartic equation is implemented as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def single_quartic(a0, b0, c0, d0, e0):
 
    &#39;&#39;&#39; Reduce the quartic equation to to form:
        x**4 + a*x**3 + b*x**2 + c*x + d = 0&#39;&#39;&#39;
    a, b, c, d = b0/a0, c0/a0, d0/a0, e0/a0

    # Some repeating variables
    a0 = 0.25*a
    a02 = a0*a0

    # Coefficients of subsidiary cubic equation
    p = 3*a02 - 0.5*b
    q = a*a02 - b*a0 + 0.5*c
    r = 3*a02*a02 - b*a02 + c*a0 - d

    # One root of the cubic equation
    z0, _, _ = single_cubic(1, p, r, p*r - 0.5*q*q)

    # Additional variables
    s = cmath.sqrt(2*p + 2*z0.real + 0j)
    if s == 0:
        t = z0*z0 + r
    else:
        t = -q / s

    # Compute roots by quadratic equations
    r0, r1 = single_quadratic(1, s, z0 + t)
    r2, r3 = single_quadratic(1, -s, z0 - t)

    return r0 - a0, r1 - a0, r2 - a0, r3 - a0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the quartic solution calls both cubic and quadratic functions.&lt;/p&gt;
&lt;p&gt;For a single cubic equation, the results are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; single_cubic(*p_cubic)
((-1.147566194142574+0j),
 (0.01557779507848811+1.8694553386446031j),
 (0.01557779507848811-1.8694553386446031j))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and for a quartic:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; single_quartic(*p_quartic)
((-1.195389428644198+0.766017693855147j),
 (-1.195389428644198-0.766017693855147j),
 (0.6712237840251022+0.8772599258280781j),
 (0.6712237840251022-0.8772599258280781j))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look at the computation times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit single_cubic(*p_cubic)
28.6 µs ± 604 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

%timeit single_quartic(*p_quartic)
50.3 µs ± 636 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can notice that &lt;code&gt;single_cubic&lt;/code&gt; is &lt;strong&gt;twice as fast&lt;/strong&gt; than both numerical solvers implemented in Numpy. Whereas, &lt;code&gt;single_quartic&lt;/code&gt; is about 30-40% faster than the numerical solvers.&lt;/p&gt;
&lt;p&gt;What about multiple polynomials?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit [single_cubic(*pi) for pi in p_cubics]
236 ms ± 7.89 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

%timeit [single_quartic(*pi) for pi in p_quartics]
421 ms ± 1.84 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Analytical closed-form solver is about &lt;strong&gt;twice as fast&lt;/strong&gt;  than &lt;code&gt;numpy.roots&lt;/code&gt;. However, it is much slower (almost one order of magnitude) than the numerical solver from &lt;code&gt;numpy.linalg.eigvals&lt;/code&gt;. This difference is mainly the consequence of using list comprehension.&lt;/p&gt;
&lt;h3 id=&#34;just-in-time-compiler-from-numba&#34;&gt;Just-in-time compiler from Numba&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s see if we can speed up the computation by using &lt;em&gt;just-in-time&lt;/em&gt; compiler from &lt;a href=&#34;http://numba.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Numba&lt;/a&gt;. We only need to import it and put a decorator before each function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from numba import jit

@jit(nopython=True)
def single_quadratic(a0, b0, c0):
	...

@jit(nopython=True)
def single_cubic(a0, b0, c0, d0):
	...

@jit(nopython=True)
def single_quartic(a0, b0, c0, d0, e0):
	...
	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are new computation times after Numba was implemented:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit single_cubic(*p_cubic)
6.34 µs ± 7.75 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)

%timeit single_quartic(*p_quartic)
5.8 µs ± 6.87 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can notice that the algorithms are &lt;strong&gt;several times faster&lt;/strong&gt; than both numerical solvers implemented in Numpy.&lt;/p&gt;
&lt;p&gt;What about multiple polynomials?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit [single_cubic(*pi) for pi in p_cubics]
27.6 ms ± 80.5 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

%timeit [single_quartic(*pi) for pi in p_quartics]
30.8 ms ± 90.6 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Analytical closed-form solver (with Numba) is &lt;strong&gt;one order of magnitude faster&lt;/strong&gt; than &lt;code&gt;numpy.roots&lt;/code&gt; and shows similar performance, but slightly faster, than numerical solver from &lt;code&gt;numpy.linalg.eigvals&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, notice that list comprehensions were used here for multiple inputs. What if we could vectorize this code using Numpy arrays and speed up computation times even more?&lt;/p&gt;
&lt;h3 id=&#34;vectorized-analytical-closed-form-solvers&#34;&gt;Vectorized analytical closed-form solvers&lt;/h3&gt;
&lt;p&gt;To vectorize functions &lt;code&gt;single_quadratic&lt;/code&gt;, &lt;code&gt;single_cubic&lt;/code&gt;, and &lt;code&gt;single_quartic&lt;/code&gt; using Numpy arrays we have to get rid of all &lt;code&gt;if&lt;/code&gt; clauses and replace them with Numpy masks. Also, we have to replace all mathematical functions from &lt;code&gt;math&lt;/code&gt; and &lt;code&gt;cmath&lt;/code&gt; with corresponding Numpy functions. This is implemented as follows.&lt;/p&gt;
&lt;p&gt;For quadratic equation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def multi_quadratic(a0, b0, c0):
    # Quadratic coefficient
    a, b = b0 / a0, c0 / a0

    # Some repeating variables
    a0 = -0.5*a
    delta = a0*a0 - b
    sqrt_delta = numpy.sqrt(delta + 0j)

    # Roots
    r1 = a0 - sqrt_delta
    r2 = a0 + sqrt_delta

    return r1, r2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For cubic equation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def multi_cubic(a0, b0, c0, d0, all_roots=True):
    # Cubic coefficients
    a, b, c = b0 / a0, c0 / a0, d0 / a0

    # Some repeating constants and variables
    third = 1./3.
    a13 = a*third
    a2 = a13*a13
    sqr3 = math.sqrt(3)

    # Additional intermediate variables
    f = third*b - a2
    g = a13 * (2*a2 - b) + c
    h = 0.25*g*g + f*f*f

    # Masks for different combinations of roots
    m1 = (f == 0) &amp;amp; (g == 0) &amp;amp; (h == 0)     # roots are real and equal
    m2 = (~m1) &amp;amp; (h &amp;lt;= 0)                   # roots are real and distinct
    m3 = (~m1) &amp;amp; (~m2)                      # one real root and two complex

    def cubic_root(x):
        &#39;&#39;&#39; Compute cubic root of a number while maintaining its sign
        &#39;&#39;&#39;
        root = numpy.zeros_like(x)
        positive = (x &amp;gt;= 0)
        negative = ~positive
        root[positive] = x[positive]**third
        root[negative] = -(-x[negative])**third
        return root

    def roots_all_real_equal(c):
        &#39;&#39;&#39; Compute cubic roots if all roots are real and equal
        &#39;&#39;&#39;
        r1 = -cubic_root(c)
        if all_roots:
            return r1, r1, r1
        else:
            return r1

    def roots_all_real_distinct(a13, f, g, h):
        &#39;&#39;&#39; Compute cubic roots if all roots are real and distinct
        &#39;&#39;&#39;
        j = numpy.sqrt(-f)
        k = numpy.arccos(-0.5*g / (j*j*j))
        m = numpy.cos(third*k)
        r1 = 2*j*m - a13
        if all_roots:
            n = sqr3 * numpy.sin(third*k)
            r2 = -j * (m + n) - a13
            r3 = -j * (m - n) - a13
            return r1, r2, r3
        else:
            return r1

    def roots_one_real(a13, g, h):
        &#39;&#39;&#39; Compute cubic roots if one root is real and other two are complex
        &#39;&#39;&#39;
        sqrt_h = numpy.sqrt(h)
        S = cubic_root(-0.5*g + sqrt_h)
        U = cubic_root(-0.5*g - sqrt_h)
        S_plus_U = S + U
        r1 = S_plus_U - a13
        if all_roots:
            S_minus_U = S - U
            r2 = -0.5*S_plus_U - a13 + S_minus_U*sqr3*0.5j
            r3 = -0.5*S_plus_U - a13 - S_minus_U*sqr3*0.5j
            return r1, r2, r3
        else:
            return r1

    # Compute roots
    if all_roots:
        roots = numpy.zeros((3, len(a))).astype(complex)
        roots[:, m1] = roots_all_real_equal(c[m1])
        roots[:, m2] = roots_all_real_distinct(a13[m2], f[m2], g[m2], h[m2])
        roots[:, m3] = roots_one_real(a13[m3], g[m3], h[m3])
    else:
        roots = numpy.zeros(len(a))
        roots[m1] = roots_all_real_equal(c[m1])
        roots[m2] = roots_all_real_distinct(a13[m2], f[m2], g[m2], h[m2])
        roots[m3] = roots_one_real(a13[m3], g[m3], h[m3])

    return roots
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for quadratic equation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def multi_quartic(a0, b0, c0, d0, e0):
    # Quartic coefficients
    a, b, c, d = b0/a0, c0/a0, d0/a0, e0/a0

    # Some repeating variables
    a0 = 0.25*a
    a02 = a0*a0

    # Coefficients of subsidiary cubic equation
    p = 3*a02 - 0.5*b
    q = a*a02 - b*a0 + 0.5*c
    r = 3*a02*a02 - b*a02 + c*a0 - d

    # One root of the cubic equation
    z0 = multi_cubic(1, p, r, p*r - 0.5*q*q, all_roots=False)

    # Additional variables
    s = numpy.sqrt(2*p + 2*z0.real + 0j)
    t = numpy.zeros_like(s)
    mask = (s == 0)
    t[mask] = z0[mask]*z0[mask] + r[mask]
    t[~mask] = -q[~mask] / s[~mask]

    # Compute roots by quadratic equations
    r0, r1 = solve_multi_quadratic(1, s, z0 + t) - a0
    r2, r3 = solve_multi_quadratic(1, -s, z0 - t) - a0

    return r0, r1, r2, r3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s examine the computation time of vectorized analytical closed-form solvers for a single polynomial:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit multi_cubic(*p_cubic.T)
174 µs ± 2.02 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)

%timeit multi_quartic(*p_quartic.T)
233 µs ± 4.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clearly, vectorized version for a single polynomial is overkill, and results in slowest computation times.&lt;/p&gt;
&lt;p&gt;But what about multiple polynomials:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%timeit multi_cubic(*p_cubics.T)
3.14 ms ± 13.1 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

%timeit multi_quartic(*p_quartics.T)
5.46 ms ± 38.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The vectorized implementation of analytical solvers is an order of magnitude faster than original analytical implementation, even with &lt;em&gt;just-in-time&lt;/em&gt; compiler from Numba. Furthermore, the vectorized implementation is two order of magnitudes faster than the numerical solver &lt;code&gt;roots&lt;/code&gt; and also one-order of magnitude faster than &lt;code&gt;linalg.eigvals&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary-tldr&#34;&gt;Summary (TL;DR)&lt;/h2&gt;
&lt;p&gt;Findings on computation speed of different ways to solve cubic and quartic equations in Python can be summarized as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two numerical algorithms for finding polynomial roots are available out-of-box from Numpy package (&lt;code&gt;numpy.roots&lt;/code&gt; and &lt;code&gt;numpy.linalg.eigvals&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Analytical algorithms (closed-form solutions) for solving polynomial roots were implemented in Python (&lt;code&gt;single_cubic/single_quartic&lt;/code&gt; for a single polynomial, and vectorized &lt;code&gt;multi_cubic/multi_quartic&lt;/code&gt;  for multiple polynomials). These functions are available through &lt;a href=&#34;https://github.com/NKrvavica/fqs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FQS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Both numerical algorithms have similar CPU times for a single polynomial, but for multiple polynomials &lt;code&gt;linalg.eigvals&lt;/code&gt; becomes much faster (up to one order of magnitude)&lt;/li&gt;
&lt;li&gt;Analytical algorithm &lt;code&gt;single_cubic/single_quartic&lt;/code&gt; is the fastest when a single polynomial, or a set smaller then 100 polynomials should be solved&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;single_cubic/single_quartic&lt;/code&gt; &lt;em&gt;just-in-time&lt;/em&gt; compiler from Numba gives a significant increase in the computational speed&lt;/li&gt;
&lt;li&gt;Analytical algorithm &lt;code&gt;multi_cubic/multi_quartic&lt;/code&gt; is the fastest when a set larger than 100 polynomials is given as input&lt;/li&gt;
&lt;li&gt;A Python function containing &lt;code&gt;single_cubic&lt;/code&gt; , &lt;code&gt;single_quartic&lt;/code&gt;, &lt;code&gt;multi_cubic&lt;/code&gt;, and &lt;code&gt;multi_quartic&lt;/code&gt;, as well as a function than determines what solver should be used in a specific case, is available through &lt;a href=&#34;https://github.com/NKrvavica/fqs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FQS&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The CPU times are summarized in the following two tables for different number of polynomials (Nr.) and separately for cubic and quartic equations:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Nr.&lt;/th&gt;
&lt;th&gt;&lt;code&gt;roots&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;linalg.eigvals&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;single_cubic&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;single_cubic(@jit)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;multi_cubic&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;76.5 µs&lt;/td&gt;
&lt;td&gt;67 µs&lt;/td&gt;
&lt;td&gt;28.6 µs&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.34 µs&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;174 µs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;100&lt;/td&gt;
&lt;td&gt;8.19 ms&lt;/td&gt;
&lt;td&gt;0.54 ms&lt;/td&gt;
&lt;td&gt;2.11 ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.27 ms&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.24 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;10000&lt;/td&gt;
&lt;td&gt;786 ms&lt;/td&gt;
&lt;td&gt;31.2 ms&lt;/td&gt;
&lt;td&gt;236 ms&lt;/td&gt;
&lt;td&gt;27.6 ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;3.14 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Nr.&lt;/th&gt;
&lt;th&gt;&lt;code&gt;roots&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;linalg.eigvals&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;single_quartic&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;single_quartic (@jit)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;multi_quartic&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;80.1 µs&lt;/td&gt;
&lt;td&gt;69.3 µs&lt;/td&gt;
&lt;td&gt;50.3 µs&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;5.8 µs&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;233 µs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;100&lt;/td&gt;
&lt;td&gt;8.22 ms&lt;/td&gt;
&lt;td&gt;0.59 ms&lt;/td&gt;
&lt;td&gt;3.94 ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.33 ms&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.34 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;10000&lt;/td&gt;
&lt;td&gt;795 ms&lt;/td&gt;
&lt;td&gt;48.3 ms&lt;/td&gt;
&lt;td&gt;421 ms&lt;/td&gt;
&lt;td&gt;30.8 ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;5.46 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Analytical implementation of Roe solver for two-layer shallow water equations with accurate treatment for loss of hyperbolicity</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2018-analytical/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2018-analytical/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Analysis of Climate Change Impact on Water Supply in Northern Istria (Croatia)</title>
      <link>https://nkrvavica.github.io/publication/karleuvsa-2018-analysis/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0200</pubDate>
      <guid>https://nkrvavica.github.io/publication/karleuvsa-2018-analysis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Methodology for defining the design storm for sizing the infiltration system</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2018-metodologija/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0200</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2018-metodologija/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Geomorfološke promjene minijaturnog žala na kršu</title>
      <link>https://nkrvavica.github.io/publication/ruvzic-2018-geomorfolovske/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0200</pubDate>
      <guid>https://nkrvavica.github.io/publication/ruvzic-2018-geomorfolovske/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integrated computational model for Sea Organ simulation</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2018-integrated/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0200</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2018-integrated/</guid>
      <description></description>
    </item>
    
    <item>
      <title>New approach to flap-type wavemaker equation with wave breaking limit</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2018-new/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2018-new/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The relevance of turbulent mixing in estuarine numerical models for two-layer shallow water flow</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2018-relevance/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2018-relevance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Numerical modelling of two-layer shallow water flow in microtidal salt-wedge estuaries: Finite volume solver and field validation</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2017-numerical/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2017-numerical/</guid>
      <description></description>
    </item>
    
    <item>
      <title>River-Sea Interaction in the Context of Climate Change</title>
      <link>https://nkrvavica.github.io/project/uniri_mladi_2018-19/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://nkrvavica.github.io/project/uniri_mladi_2018-19/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Programme for young researchers funded by the University of Rijeka, Croatia&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Project nr.: 17.06.2.1.02.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Project duration: July, 2018 - July, 2019&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Lead researcher: Nino Krvavica, PhD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Project &lt;a href=&#34;https://portal.uniri.hr/Projekti/1015?controler=projekti&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;homepage&lt;/a&gt; (in Croatian)&lt;/p&gt;
&lt;p&gt;Floods in coastal areas are occurring more frequently because of climate changes, especially due to more pronounced extreme precipitations and storm surges from the seas. Until now, these two phenomena have been observed separately, and only recently, the interaction between the sea and rivers has begun to be considered as an integral process. In the Republic of Croatia, there are many coastal areas that are exposed to flood hazards equally from the sea and land. However, the processes that take place due to the interaction between freshwater and saltwater in the coastal areas are still not sufficiently examined, especially under sudden flow changes such as flood waves, and in highly stratified conditions characteristic of the Adriatic Sea.&lt;/p&gt;
&lt;p&gt;The proposed research will focus on an integrated understanding of the dynamics of the saltwater and freshwater under the influence of river flow, tides and waves, as well as floods due to the coincidence of extreme precipitation and storm surges. In addition to hydrodynamic processes, the sediment transport and the corresponding morphological changes in coastal areas will be investigated. This research will be based on specialized numerical models, original mathematical models and field measurements. As part of the field measurement campaigns, the scientific equipment from the laboratory of the Faculty of Civil Engineering will be activated, which was obtained through the project Research infrastructure development at the Campus of the University of Rijeka (RISK).&lt;/p&gt;
&lt;p&gt;The aim of the proposed research is to carry out extensive flood simulations, including the non-linear interaction between storm surges, sea waves and river flows. For this purpose, a combination of various open-source computer programs will be used. Also, one of the goals is to improve our own numerical model (STREAM) by including: non-steady flow calculation of three layers of different densities, boundary conditions describing realistic waves, and sediment transport. Finally, field measurements aim to measure and better understand mixing intensities and friction on the interface between freshwater and saltwater layers, establish systematic wave measurements in the Bay of Rijeka, and improve the methodology for measuring coastal morphological changes using SfM photogrammetry.&lt;/p&gt;
&lt;p&gt;Under his project, the research will result in the development of flood forecasting methodology that accounts for the river-sea interaction, in the increase of the existing knowledge on saltwater and freshwater interaction in the coastal area, in the definition of the appropriate wave spectrum for the Bay of Rijeka, and in the open-source STREAM numerical model which will become available to a wider scientific and professional community. In addition, cooperation and partnership with other departments at the University of Rijeka and colleagues from other universities in the country and abroad will be initiated. Finally, the proposed research will intensify the integration of the University of Rijeka into the European research community and stimulate the transfer of knowledge and technology to the business sector.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A field study of interfacial friction and entrainment in a microtidal salt-wedge estuary</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2016-field/</link>
      <pubDate>Fri, 01 Apr 2016 00:00:00 +0200</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2016-field/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Salt-Wedge Response to Variable River Flow and Sea-Level Rise in the Microtidal Rječina River Estuary, Croatia</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2016-salt/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2016-salt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Analiza procjene intenziteta oborine pomoću X-band radara</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2016-analiza/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2016-analiza/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Modelling of the morphology of open river beds for the implementation of a one-dimensional flow analysis</title>
      <link>https://nkrvavica.github.io/publication/travavs-2015-modelling/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/travavs-2015-modelling/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A comparison of method of characteristics and Preissmann scheme for flood propagation modeling with 1D Saint-Venant equations</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2014-comparison/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2014-comparison/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Estimaton of maximum short-term precipitation over the Rijeka region</title>
      <link>https://nkrvavica.github.io/publication/gajic-2014-estimaton/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/gajic-2014-estimaton/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spectral and Monochromatic Approach to the Definition of Hydrodynamic Load on Vertical Piles</title>
      <link>https://nkrvavica.github.io/publication/travavs-2014-spectral/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/travavs-2014-spectral/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement and analysis of salinization at the Rječina estuary</title>
      <link>https://nkrvavica.github.io/publication/krvavica-2012-mjerenje/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/krvavica-2012-mjerenje/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Numerical analysis of hysteresis in rating curves for open channel flow</title>
      <link>https://nkrvavica.github.io/publication/travavs-2012-numerical/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0100</pubDate>
      <guid>https://nkrvavica.github.io/publication/travavs-2012-numerical/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
